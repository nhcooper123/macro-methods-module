str(magicaltree)
# Ensure tree is fully bifurcating
magicaltree <- multi2di(magicaltree)
# Replace spaces with underscores in the species names
magicaldata$Species <- gsub(" ", "_", magicaldata$Species)
# Add species names to row names
row.names(magicaldata) <- magicaldata$Species
magicaldata2 <- magicaldata[, 2:5]
match.species <- treedata(magicaltree, magicaldata2)
mytree <- match.species$phy
mydata <- match.species$data
# Reorder the data so it's the same order as in the tree
mydata <- mydata[match(mytree$tip.label,rownames(mydata)),]
# Create a vector of two colours
social.colors <- c("lightblue", "plum")
# Plot the tree, add coloured tip labels and a legend
par(mar = c(0,0,0,0))
plot(mytree, cex = 0.5, adj = c(0.2))
tiplabels(pch = 16, col = social.colors[mydata[,"SocialStatus"]])
legend("bottomleft",legend=c("solitary", "social"),
pch = 15, col=c("lightblue", "plum"), bty = "n")
# Functions required for SPELT method for detecting evolutionary lag
# Identify cherries
cherry.nodes <- function(phy) {
names(which(table(phy$edge[, 1][phy$edge[, 2] <= total.tips(phy)]) == 2))
}
# Identify species coming from nodes of a phylogeny
node.species1 <- function(phy, node.list) {
sapply(node.list, function(x)
phy$tip.label[phy$edge[, 2][which(phy$edge[, 1] == x)][1]])
}
node.species2 <- function(phy, node.list) {
sapply(node.list, function(x)
phy$tip.label[phy$edge[, 2][which(phy$edge[, 1] == x)][2]])
}
# Extract branch lengths leading to nodes of a phylogeny
branch.length.pair <- function(phy, node.list) {
sapply(node.list, function(x)
phy$edge.length[which(phy$edge[,1] == x)][1])
}
# Build empty dataframe for SPELT functions
build.SPELT.data <- function(phy) {
SPELT.data <- data.frame(array(dim = c(length(cherry.nodes(phy)), 10)))
colnames(SPELT.data) <- c("species1", "species2", "species1.var1",
"species2.var1", "species1.var2",
"species2.var2", "branch.length",
"contrast.var1", "contrast.var2",
"residuals")
return(SPELT.data)
}
# Add species and variable data into SPELT dataframe
add.SPELT.data <- function(phy, data, node.list, var1.col, var2.col, speciesnames.col, SPELT.data) {
SPELT.data$species1 <- node.species1(phy,node.list)
SPELT.data$species2 <- node.species2(phy,node.list)
SPELT.data$species1.var1 <- get.data(data, var1.col, speciesnames.col, SPELT.data$species1)
SPELT.data$species2.var1 <- get.data(data, var1.col, speciesnames.col, SPELT.data$species2)
SPELT.data$species1.var2 <- get.data(data, var2.col, speciesnames.col, SPELT.data$species1)
SPELT.data$species2.var2 <- get.data(data, var2.col, speciesnames.col, SPELT.data$species2)
SPELT.data$branch.length <- branch.length.pair(phy, node.list)
return(SPELT.data)
}
# Calculate contrasts in primary and lag variables
get.raw.contrasts <- function(SPELT.data) {
for(i in seq_along(SPELT.data$species1)) {
if (SPELT.data$species1.var1[i] >= SPELT.data$species2.var1[i]) {
SPELT.data$contrast.var1[i] <- SPELT.data$species1.var1[i] - SPELT.data$species2.var1[i]
SPELT.data$contrast.var2[i] <- SPELT.data$species1.var2[i] - SPELT.data$species2.var2[i]
} else {
SPELT.data$contrast.var1[i] <- SPELT.data$species2.var1[i] - SPELT.data$species1.var1[i]
SPELT.data$contrast.var2[i] <- SPELT.data$species2.var2[i] - SPELT.data$species1.var2[i]
}
}
return(SPELT.data)
}
# Fit lag contrasts model
contrasts.model.residuals <- function(SPELT.data) {
model <- lm(SPELT.data$contrast.var2 ~ SPELT.data$contrast.var1 - 1)
residuals <- unclass(model)$residuals
return(residuals)
}
# Add contrasts residuals to SPELT dataset
add.SPELT.contrasts.data <- function(SPELT.data) {
SPELT.data$residuals <- contrasts.model.residuals(SPELT.data)
return(SPELT.data)
}
# Remove branches older than user defined age limit
# Needed to check whether lag has occurred quickly and thus only
# seen in younger branches
remove.old.branches <- function(SPELT.data, age.limit = NULL, cut.off = 3) {
if (!is.null(age.limit)) {
SPELT.data <- SPELT.data[which(SPELT.data$branch.length <= age.limit), ]
}
if (nrow(SPELT.data) < cut.off) {
stop(paste("< ", cut.off, " branches shorter than age limit"))
}
return(SPELT.data)
}
# Create SPELT dataset
get.SPELT.data <- function(phy, data, node.list, var1.col, var2.col, speciesnames.col,
SPELT.data, age.limit = NULL, cut.off) {
SPELT.data <- build.SPELT.data(phy)
SPELT.data <- add.SPELT.data(phy, data, node.list, var1.col, var2.col, speciesnames.col, SPELT.data)
SPELT.data <- get.raw.contrasts(SPELT.data)
SPELT.data <- remove.old.branches(SPELT.data, age.limit, cut.off)
SPELT.data <- add.SPELT.contrasts.data(SPELT.data)
return(SPELT.data)
}
# Fit lag residuals model
fit.lag.model <- function(SPELT.data) {
lag.model <- lm(SPELT.data$residuals ~ SPELT.data$branch.length)
}
# SPELT function
SPELT <- function(phy, data, primary.variable, lag.variable, speciesnames,
age.limit = NULL, warn.dropped = TRUE, cut.off = 3) {
if (!is.data.frame(data))
stop("'data' must be an object of class 'data.frame'")
if (!inherits(phy, "phylo"))
stop("'phy' must be an object of class 'phylo'")
# Define variables
var1.col <- column.ID(data, primary.variable)
if (length(var1.col) == 0)
stop("Primary variable not found in data")
var2.col <- column.ID(data, lag.variable)
if (length(var2.col) == 0)
stop("Lag variable not found in data")
speciesnames.col <- column.ID(data, speciesnames)
if (length(speciesnames.col) == 0)
stop("Species names not found in data")
# Ensure phylogeny has no polytomies
phy <- multi2di(phy)
# Tidy up data and tree
data <- remove.incomplete.data(data, var1.col, var2.col)
data <- remove.missing.species.data(phy, data, speciesnames.col)
if (nrow(data) < cut.off)
stop(paste("< ", cut.off, " species have data for both variables and are in the phylogeny"))
phy <- remove.missing.species.tree(phy, data, speciesnames.col)
if (warn.dropped) {
tree.not.data <- id.missing.tree(phy, data, speciesnames.col)
data.not.tree <- id.missing.data(phy, data, speciesnames.col)
}
# Identify cherries
node.list <- cherry.nodes(phy)
# Collate data required for SPELT analyses
SPELT.data <- get.SPELT.data(phy, data, node.list,
var1.col, var2.col, speciesnames.col, SPELT.data, age.limit, cut.off)
# Fit SPELT model
SPELT.model <- fit.lag.model(SPELT.data)
# Outputs
SPELT.results <- list(summary = summary(SPELT.model), variables = list(primary.variable = primary.variable,
lag.variable = lag.variable), data = SPELT.data, age.limit = age.limit,
dropped = list(tree.not.data = tree.not.data, data.not.tree = data.not.tree),
Nnodes = nrow(SPELT.data))
class(SPELT.results) <- "SPELT"
return(SPELT.results)
}
# Collate details for summary and plot outputs
SPELT.summary.details <- function(SPELT.results) {
details <- paste("primary variable = ", SPELT.results$variables$primary.variable,
", lag variable = ", SPELT.results$variables$lag.variable, sep = "")
if (!is.null(SPELT.results$age.limit)) {
age.limit <- paste("age limit = ", SPELT.results$age.limit, sep = "")
} else {
age.limit <- "age limit = NULL"
}
return(list(details, age.limit))
}
# Plotting function for SPELT objects
plot.SPELT <- function(x, ...) {
par(bty = "l")
plot(x$data$residuals ~ x$data$branch.length,
xlab = paste("divergence time (", SPELT.summary.details(x)[[2]],")", sep = ""),
ylab = "residuals", cex.main = 0.8, pch = 16, las = 1,
main = paste("SPELT results: ", SPELT.summary.details(x)[[1]], sep = ""))
abline(fit.lag.model(x$data))
abline(0,0,lty = 2)
}
# Summary function for SPELT objects
summary.SPELT <- function(object, ...) {
message("\nSPELT Details:\n", SPELT.summary.details(object)[[1]])
message("\n",SPELT.summary.details(object)[[2]], "\n")
print(object$summary)
}
# Generic functions
# Identify column numbers
column.ID <- function(data, column.name) {
which(names(data) == column.name)
}
# Remove incomplete data
remove.incomplete.data <- function(data, var1.col, var2.col) {
id <- complete.cases(data[, c(var1.col, var2.col)])
data <- data[id, ]
return(data)
}
# ID species in tree that are not in the data
id.missing.tree <- function(phy, data, speciesnames.col) {
setdiff(phy$tip.label, data[, speciesnames.col])
}
# ID species in data that are not in the tree
id.missing.data <- function(phy, data, speciesnames.col) {
setdiff(data[, speciesnames.col], phy$tip.label)
}
# Remove missing species from tree
remove.missing.species.tree <- function(phy, data, speciesnames.col) {
tree.not.data <- id.missing.tree(phy, data, speciesnames.col)
if (length(tree.not.data) > 0) {
phy <- drop.tip(phy, tree.not.data)
}
return(phy)
}
# Remove missing species from data
remove.missing.species.data <- function(phy, data, speciesnames.col) {
data.not.tree <- id.missing.data(phy, data, speciesnames.col)
if (length(data.not.tree) > 0) {
matches <- match(data[,speciesnames.col], data.not.tree, nomatch = 0)
data <- subset(data, matches == 0)
}
return(data)
}
# Identify total number of tips in tree
total.tips <- function(phy) {
length(phy$tip.label)
}
# Extract data for species
get.data <- function(data, variable.col, speciesnames.col, species.list) {
sapply(species.list, function(x)
data[which(data[, speciesnames.col] == x),variable.col])
}
cherry.nodes(magicaltree)
node.list <- cherry.nodes(magicaltree)
node.species1(magicaltree, node.list)
node.species2(magicaltree, node.list)
pic
get.data(magicaldata2, )
names(magicaldata)
get.data(magicaldata2, SocialStatus, node.list)
get.data(magicaldata2, SocialStatus, Species, node.list)
get.data(magicaldata, SocialStatus, Species, node.list)
get.data(magicaldata, "SocialStatus", "Species", node.list)
get.data(magicaldata, "SocialStatus", "Species", c("Fwooper", "Dragon"))
node.species <- function(phy, node.list) {
sapply(node.list, function(x)
phy$tip.label[phy$edge[, 2][which(phy$edge[, 1] == x)][1:2]])
}
node.species(magicaltree, node.list)
z <- node.species(magicaltree, node.list)
z
class(z)
str(z)
data.frame(z)
z
get.data2 <- function(data, variable.col, speciesnames.col, species.list) {
mapply(species.list, function(x)
data[which(data[, speciesnames.col] == x), variable.col])
}
get.data(magicaldata, "SocialStatus", "Species", z
)
get.data2(magicaldata, "SocialStatus", "Species", z)
str(z)
names(z)
dim(z)
dimnames(z)
dimnames(z)[[2]]
z
z2 <- data.frame(z)
z2
library(tidyr)
library(reshape2)
?melt
a <- array(c(1:23, NA), c(2,3,4))
melt(a)
a
melt(z)
z
melt(z)
z2 <- melt(z)
get.data(magicaldata, "SocialStatus", "Species", z2)
get.data(magicaldata, "SocialStatus", "value", z2)
get.data(magicaldata, "Var1", "value", z2)
get.data(magicaldata, "SocialStatus", "Species", z2)
z2
get.data(magicaldata, "SocialStatus", "Species", z2$value)
modify.node.list <- function(node.list) {
node.list <- melt(node.list)
node.list <- node.list %>%
select(-Var1) %>%
rename(Var2, "Node") %>%
rename(value, "Species")
}
modify.node.list(node.list)
node.list
z
xxx <- node.species(magicaltree, node.list)
xxx
modify.node.list(xxx)
melt(xxx
)
names(node.list)
melt(node.list)
xxx
melt(xxx)
x2 <- melt(xxx)
names(x2)
modify.node.names<- function(node.names) {
node.names <- melt(node.names)
node.names <- node.names %>%
select(-"Var1") %>%
rename(Var2, "Node") %>%
rename(value, "Species")
}
modify.node.names(xxx)
library(dplyr)
modify.node.names<- function(node.names) {
node.names <- melt(node.names)
node.names <- node.names %>%
select(-Var1) %>%
rename(Var2, "Node") %>%
rename(value, "Species")
}
modify.node.names(xxx)
?rename
modify.node.names<- function(node.names) {
node.names <- melt(node.names)
node.names <- node.names %>%
select(-Var1) %>%
rename(Node = Var2) %>%
rename(Species = value)
}
modify.node.names(xxx)
modify.node.names<- function(node.names) {
node.names <- melt(node.names)
node.names <- node.names %>%
select(-Var1) %>%
rename(Node = Var2) %>%
rename(Species = value)
return(node.names)
}
modify.node.names(xxx)
x2 <- modify.node.names(xxx)
get.data(magicaldata, "SocialStatus", "Species", x2$Species)
get.data(magicaldata, 2, 1, x2$Species)
# Add species and variable data into a dataframe
add.sister.data <- function(phy, data, node.list, grouping.var.col, test.var.col, speciesnames.col) {
sister.data <- get.node.species(phy, node.list)
sister.data$grouping.var <- get.data(data, grouping.var.col, speciesnames.col, node.names$Species)
sister.data$grouping.var <- get.data(data, test.var.col, speciesnames.col, node.names$Species)
return(sister.data)
}
View(magicaldata)
add.sister.data(phy = magicaltree, magicaldata, 3, 5, 1)
get.node.species <- function(phy, node.list) {
node.names <- node.species(phy. node.list)
node.names <- melt(node.names)
node.names <- node.names %>%
select(-Var1) %>%
rename(Node = Var2) %>%
rename(Species = value)
return(node.names)
}
get.node.species <- function(phy, node.list) {
node.names <- node.species(phy, node.list)
node.names <- melt(node.names)
node.names <- node.names %>%
select(-Var1) %>%
rename(Node = Var2) %>%
rename(Species = value)
return(node.names)
}
add.sister.data(phy = magicaltree, magicaldata, 3, 5, 1)
add.sister.data <- function(phy, data, node.list, grouping.var.col, test.var.col, speciesnames.col) {
sister.data <- get.node.species(phy, node.list)
sister.data$grouping.var <- get.data(data, grouping.var.col, speciesnames.col, sister.data$Species)
sister.data$grouping.var <- get.data(data, test.var.col, speciesnames.col, sister.data$Species)
return(sister.data)
}
add.sister.data(phy = magicaltree, magicaldata, 3, 5, 1)
add.sister.data(phy = magicaltree, magicaldata, node.list, 3, 5, 1)
add.sister.data <- function(phy, data, node.list, grouping.var.col, test.var.col, speciesnames.col) {
sister.data <- get.node.species(phy, node.list)
sister.data$grouping.var <- get.data(data, grouping.var.col, speciesnames.col, sister.data$Species)
sister.data$test.var <- get.data(data, test.var.col, speciesnames.col, sister.data$Species)
return(sister.data)
}
add.sister.data(phy = magicaltree, magicaldata, node.list, 3, 5, 1)
sister.data <- add.sister.data(phy = magicaltree, magicaldata, node.list, 3, 5, 1)
dd <- filter(sister.data, Node == 53
)
dd
dd$grouping.var[1] == dd$grouping.var[2]
dd$grouping.var[1] != dd$grouping.var[2]
sapply(sister.data, function(x) sister.data$grouping.var[1] != sister.data$grouping.var[2])
sapply(sister.data$Node, function(x) sister.data$grouping.var[1] != sister.data$grouping.var[2])
sapply(sister.data$Node, function(x) sister.data$grouping.var[x] != sister.data$grouping.var[x])
sapply(sister.data$Node, function(x) sister.data$grouping.var[x] != sister.data$grouping.var[x+1])
for(i in 1:length(node.list))
{}
for(i in 1:length(node.list)){
filter(sister.data, Node == Node[i])
}
for(i in 1:length(node.list)){
print(filter(sister.data, Node == Node[i])
))
print(filter(sister.data, Node == Node[i])
))
for(i in 1:length(node.list)){
print(filter(sister.data, Node == Node[i])
)
)
for(i in 1:length(node.list)){
print(filter(sister.data, Node == Node[i]))}
for(i in 1:length(node.list)){
new <- filter(sister.data, Node == Node[i])
new$grouping.var[1] != new$grouping.var[2]
}
for(i in 1:length(node.list)){
new <- filter(sister.data, Node == Node[i])
print(new$grouping.var[1] != new$grouping.var[2]
)}
sapply(node.list function (x) print(sister.data[sister.data$Node == sister.data$Node[x]]$grouping.var[1] != sister.data[sister.data$Node == sister.data$Node[x]]$grouping.var[2]
sapply(node.list, function(x) print(sister.data[sister.data$Node == sister.data$Node[x]]$grouping.var[1] != sister.data[sister.data$Node == sister.data$Node[x]]$grouping.var[2]
)
)
x
sister.data
sister.data[sister.data$Node == sister.data$Node[x]]$grouping.var[1]
x <- 1
sister.data[sister.data$Node == sister.data$Node[x]]$grouping.var[1]
sister.data[sister.data$Node == sister.data$Node[x]]$grouping.var
sister.data[sister.data$Node == sister.data$Node[x]]
sister.data$Node[1]
sister.data[, sister.data$Node == sister.data$Node[x]]
sister.data[sister.data$Node == sister.data$Node[x], ]
sapply(node.list, function(x) print(sister.data[sister.data$Node == sister.data$Node[x], ]$grouping.var[1] != sister.data[sister.data$Node == sister.data$Node[x], ]$grouping.var[2]
)
)
sapply(sister.data, function(x) print(sister.data[sister.data$Node == sister.data$Node[x], ]$grouping.var[1] != sister.data[sister.data$Node == sister.data$Node[x], ]$grouping.var[2])
)
find.different.sisters <- function(node.list, sister.data) {
for(i in 1:length(node.list)) {
new <- filter(sister.data, Node == Node[i])
print(new$grouping.var[1] != new$grouping.var[2])
}
}
find.different.sisters(node.list, sister.data)
# Add species and variable data into a dataframe
add.sister.data <- function(phy, data, node.list, grouping.var.col, test.var.col, speciesnames.col) {
sister.data <- get.node.species(phy, node.list)
sister.data$grouping.var <- get.data(data, grouping.var.col, speciesnames.col, sister.data$Species)
sister.data$test.var <- get.data(data, test.var.col, speciesnames.col, sister.data$Species)
sister.data$match <- find.different.sisters(node.list, sister.data)
return(sister.data)
}
add.sister.data(phy = magicaltree, magicaldata, node.list, 3, 5, 1)
add.sister.data <- function(phy, data, node.list, grouping.var.col, test.var.col, speciesnames.col) {
sister.data <- get.node.species(phy, node.list)
sister.data$grouping.var <- get.data(data, grouping.var.col, speciesnames.col, sister.data$Species)
sister.data$test.var <- get.data(data, test.var.col, speciesnames.col, sister.data$Species)
sister.data$match <- c(find.different.sisters(node.list, sister.data))
return(sister.data)
}
add.sister.data(phy = magicaltree, magicaldata, node.list, 3, 5, 1)
find.different.sisters(node.list, sister.data)
find.different.sisters(node.list, sister.data)
ff <- find.different.sisters(node.list, sister.data)
ff
library(ape)
library(ape)
primatedata <- read.csv("Primatedata.csv")
str(primatedata)
head(primatedata)
names(primatedata)
sqrt(10)
library(BAMMtools)
library(coda)
# Read in the file
mcmc <- read.csv("marsupial_mcmc_out.txt")
# Take a look at the plot
plot(mcmc$logLik ~ mcmc$generation)
burnstart <- floor(0.1 * nrow(mcmc))
postburn <- mcmc[burnstart:nrow(mcmc), ]
effectiveSize(postburn$N_shifts)
effectiveSize(postburn$logLik)
tree <- read.tree("marsupialtree.tre")
# This step may take some time...
edata <- getEventData(tree, eventdata = "marsupial_event_data.txt", burnin = 0.1)
plot.bammdata(edata, lwd = 2, legend = TRUE, cex = 0.5)
library(viridis)
plot.bammdata(edata, lwd = 2, pal = plasma(4))
best <- getBestShiftConfiguration(edata, expectedNumberOfShifts = 1)
plot.bammdata(best, lwd = 2, pal = plasma(4))
addBAMMshifts(best, cex = 1.5, bg = "white")
css <- credibleShiftSet(edata, expectedNumberOfShifts = 1, threshold = 5, set.limit = 0.95)
summary(css)
plot.credibleshiftset(css)
par(mfrow = c(1,1))
allrates <- getCladeRates(edata)
mean(allrates$lambda)
quantile(allrates$lambda, c(0.05, 0.95))
kangaroorates <- getCladeRates(edata, node = 301)
mean(kangaroorates$lambda)
quantile(kangaroorates$lambda, c(0.05, 0.95))
nonkangaroorate <- getCladeRates(edata, node = 301, nodetype = "exclude")
mean(nonkangaroorate$lambda)
quantile(nonkangaroorate$lambda, c(0.05, 0.95))
# This may take some time...
plotRateThroughTime(edata, ratetype = "speciation")
plotRateThroughTime(edata, node = 301, nodetype="include")
plotRateThroughTime(edata, node = 301, nodetype="exclude")
cmat <- getCohortMatrix(edata)
cohorts(cmat, edata)
postfile <- "marsupial_mcmc_out.txt"
bfmat <- computeBayesFactors(postfile, expectedNumberOfShifts = 1, burnin=0.1)
plotPrior(mcmc, expectedNumberOfShifts = 1)
